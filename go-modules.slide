Go Modules
17 Dec 2019

Georgekutty Joyes
Senior Software Engineer, Qburst
georgekutty@qburst.com

* Today we will

- Look at why we need package management in Go
- Introduce Go Modules
- See how you can get started using modules

* Why do we need package management in Go?

* Step1: We start to write a program P

.image images/s1.png


* Step2: We add a dependency on D

.image images/s2.png

* Step3: We add a dependency on C

.image images/s3.png

* Step4: We update C (and its dependencies)

.image images/s4.png

* Introduce Go Modules

Modules provide an integrated solution for three key problems that have been a pain point for developers since Goâ€™s initial release:

- Ability to work with Go code outside of the GOPATH workspace.

- Ability to version a dependency and identify the most compatible version to use.

- Ability to manage dependencies natively using the Go tooling.

* The Principles of versioning in Go

* Compatibility

Import Compatibility rule - if an old package and a new package have the same import path, the new package must be backward-compatible with the old package.

* Repeatability

The result of a build of a given version of a package should not change over time.

* Cooperation

We must all work together to maintain the Go package ecosystem. Tools cannot work around a lack of cooperation.

* Limitations

.image images/s5.png

* Identify the most compatible version

.image images/s6.png

* Semantic Import versioning

.image images/s7.png